name: Setup ArgoCD with Helm on AWS

on:
  push:
    branches:
      - main

jobs:

  deploy:
    name: Deploy ArgoCD
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.KUBERNETES_CLUSTER_NAME }}

      - name: Add Argo Helm Repository
        run: helm repo add argo https://argoproj.github.io/argo-helm

      - name: Update Helm Repositories
        run: helm repo update

      - name: Check if ArgoCD is installed
        id: check_argocd_installed
        run: |
          if helm list -n default | grep -q my-release; then
            echo "ArgoCD is already installed."
            echo "::set-output name=installed::true"
          else
            echo "ArgoCD is not installed."
            echo "::set-output name=installed::false"
          fi

      - name: Install ArgoCD
        if: steps.check_argocd_installed.outputs.installed == 'false'
        run: |
          helm install my-release argo/argo-cd --set server.extraArgs="{--insecure}"

      - name: Extract ArgoCD Admin Password
        run: |
          kubectl -n default get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

      - name: Retrieve ArgoCD password
        id: argocd-password
        run: |
          ARGOCD_PASSWORD=$(kubectl -n default get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "::set-output name=password::$ARGOCD_PASSWORD"

      - name: Update password in AWS SSM
        run: |
          aws ssm put-parameter --name "/${{ secrets.ARGOCD_NAME }}/admin-password" --value "${{ steps.argocd-password.outputs.password }}" --type SecureString --overwrite

  Ingress:
    name: Deploy Ingress
    runs-on: ubuntu-latest
    needs: deploy
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Update kubeconfig
        run: |
          aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.KUBERNETES_CLUSTER_NAME }}

      - name: Check if Ingress exists
        id: check_ingress
        run: |
          if kubectl get ingress argocd-ingress-service >/dev/null 2>&1; then
            echo "::set-output name=ingress_exists::true"
          else
            echo "::set-output name=ingress_exists::false"
          fi

      - name: Create Ingress if not exists
        if: steps.check_ingress.outputs.ingress_exists != 'true'
        working-directory: src
        run: kubectl create -f ./argocd_ingress.yaml